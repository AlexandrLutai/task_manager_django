"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é Celery.
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–≤ Telegram.
"""

from celery import shared_task
from .models import Task, TelegramProfile
from django.utils import timezone
import requests
import os

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")


@shared_task
def check_expired_tasks():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram.
    
    –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ cron).
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞, –µ—Å–ª–∏ —É –Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.
    
    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –º–æ–∂–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å –æ—à–∏–±–∫–∏
    """
    now = timezone.now()
    expired_tasks = Task.objects.filter(completed=False, deadline__lt=now)

    for task in expired_tasks:
        user = task.assigned_to
        try:
            profile = TelegramProfile.objects.get(user=user)
        except TelegramProfile.DoesNotExist:
            continue  # Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        message = (
            f"‚è∞ –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞: <b>{task.title}</b>\n"
            f"–°—Ä–æ–∫: {task.deadline.strftime('%Y-%m-%d %H:%M')}"
        )
        try:
            requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                data={
                    "chat_id": profile.telegram_id,
                    "text": message,
                    "parse_mode": "HTML"
                }
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@shared_task
def send_new_task_notification(user_id, task_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –≤ Telegram.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django
        task_id (int): ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        
    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –º–æ–∂–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å –æ—à–∏–±–∫–∏
    """
    try:
        task = Task.objects.get(id=task_id)
        profile = TelegramProfile.objects.get(user_id=user_id)
        
        message = (
            f"üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: <b>{task.title}</b>\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
            f"–°—Ä–æ–∫: {task.deadline.strftime('%Y-%m-%d %H:%M')}"
        )
        
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            data={
                "chat_id": profile.telegram_id,
                "text": message,
                "parse_mode": "HTML"
            }
        )
    except (Task.DoesNotExist, TelegramProfile.DoesNotExist):
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É {task_id} –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")